// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entities "go-clean-architecture-demo/app/entities"
import mock "github.com/stretchr/testify/mock"

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *UseCase) Create(_a0 *entities.User) (*entities.User, error) {
	ret := _m.Called(_a0)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(*entities.User) *entities.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: skip, limit
func (_m *UseCase) List(skip int, limit int) ([]*entities.User, error) {
	ret := _m.Called(skip, limit)

	var r0 []*entities.User
	if rf, ok := ret.Get(0).(func(int, int) []*entities.User); ok {
		r0 = rf(skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(skip, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: _a0, _a1
func (_m *UseCase) UpdateById(_a0 uint, _a1 *entities.User) (*entities.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(uint, *entities.User) *entities.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *entities.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
